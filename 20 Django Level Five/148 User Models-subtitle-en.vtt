WEBVTT

00:05.170 --> 00:07.950
Hello everyone and welcome to the user's model's lecture.

00:08.950 --> 00:13.870
In this lecture We'll discuss how to use jingoes built in tools to create user authorization models

00:14.200 --> 00:18.990
and we'll also discuss more about how to set up the media files we saw previously into your project.

00:20.210 --> 00:25.250
Now previously when we logged onto the admin page of any of our projects we've seen that there's already

00:25.250 --> 00:29.960
a built in authentication authorization model set in place in the database.

00:29.960 --> 00:32.520
There were two things one of them was groups and the other one was.

00:32.520 --> 00:35.640
Users were going to learn how to use this feature of users.

00:35.720 --> 00:40.840
And previously you also may have heard me mention that sometimes not a good idea to call users.

00:40.970 --> 00:43.840
In your model that is a model that you created.

00:43.880 --> 00:46.610
And the reason for that is you may get confused if this users.

00:46.700 --> 00:51.170
Now they will show up differently in the admin as we saw earlier but this is the kind of users we're

00:51.170 --> 00:57.880
talking about the one that's built in the authentication authorization model so that specific user object

00:57.880 --> 01:03.340
has a few key features and that is the user name the e-mail the password the first name and then the

01:03.340 --> 01:06.010
surname which is the last name.

01:06.140 --> 01:10.440
And there are also some other attributes for the user object such as Is it active.

01:10.490 --> 01:11.180
IS IT staff.

01:11.180 --> 01:12.310
Is it a super user.

01:12.350 --> 01:17.510
And sometimes you will also want to add more attributes to user such as your own links or profile image

01:17.520 --> 01:18.250
etc..

01:19.240 --> 01:24.670
So you can do this in your applications models up high file by creating another class to has a relationship

01:24.670 --> 01:26.010
to the user class.

01:26.020 --> 01:28.720
So let's see an actual example of what this code would look like.

01:28.720 --> 01:34.100
So here comes a giant screen shot and this is what it looks like in your applications models that py

01:34.100 --> 01:34.850
file.

01:34.910 --> 01:41.690
First we want to import that special user from Django that contrib authorization that models import

01:41.690 --> 01:42.410
user.

01:42.500 --> 01:43.510
So A.

01:43.560 --> 01:45.250
Th models.

01:45.410 --> 01:50.510
And then we're going to do is create an actual model and we'll call it user profile info something that

01:50.510 --> 01:56.590
expands off that user and we inherit from models that model and then we create a relationship.

01:56.600 --> 01:58.550
We don't directly inherit from user.

01:58.550 --> 02:02.090
Instead what we do is create a one to one field relationship.

02:02.090 --> 02:08.480
What that basically means is this extra user profile info has a direct one to one connection to the

02:08.480 --> 02:13.110
user model and then we add in any additional attributes you want.

02:13.340 --> 02:18.770
So with the base user model you already have the previous attributes I mentioned the user name the email

02:18.770 --> 02:20.870
the password the first name and the last name.

02:20.900 --> 02:26.420
But if you want your users to have other attributes to them in the models you use this sort of extension

02:26.420 --> 02:26.640
of it.

02:26.640 --> 02:28.820
But the one to one field relationship.

02:28.820 --> 02:32.360
And here's an example of what we're going to be doing which is adding two things.

02:32.360 --> 02:36.900
One is a your link for the user which links to their portfolio.

02:37.010 --> 02:41.590
Let's say we're making some sort of web site where they can link to their portfolio or their web site

02:41.600 --> 02:43.650
cetera that's what we're going to do here.

02:43.730 --> 02:47.980
So we say is equal to models like your Elmfield and we set blank equal to true there.

02:47.990 --> 02:49.210
So they don't have to fill it out.

02:49.220 --> 02:50.820
It's optional.

02:50.900 --> 02:56.030
And then the other one we do is picture or a profile picture or whatever you want to call that variable

02:56.150 --> 02:57.620
and that's an image field.

02:57.650 --> 03:02.810
So we're going to be doing with that is having the user when they register the Web site actually be

03:02.810 --> 03:08.500
able to upload a profile picture much like you would do on Facebook or maybe even like Gmail.

03:08.660 --> 03:13.950
And then we have the string method which is just a built in attribute of self-taught user that username

03:13.970 --> 03:18.290
remember the user attribute that's built into Django has that user name.

03:18.290 --> 03:24.270
So we end up doing is if you ever print out the user it just returns back that username OK.

03:24.610 --> 03:27.480
So notice that one of the fields was something we haven't seen yet.

03:27.520 --> 03:32.910
An image field so I quickly go back here that picture was a model's image field.

03:32.980 --> 03:38.230
Now this will to store images to a model and typically we will keep any user uploaded content like this

03:38.290 --> 03:42.330
in the media file we previously created the media file in the last lecture.

03:43.280 --> 03:48.110
In order to work with images of Python We also need to install the python imaging library and you can

03:48.110 --> 03:51.880
easily install it with Pipp install pillow.

03:51.880 --> 03:57.040
Now sometimes users especially maybe some Windows users and older Windows machines get an error on this

03:57.040 --> 04:00.460
command indicating something like Jay Peggs support is disabled.

04:00.490 --> 04:05.440
If you have that error coming up when you say PYT install pillow add in these options here you can say

04:05.440 --> 04:12.760
Pipp install pillow dash dash global option build underscore XTi and then space dash dash global dash

04:12.760 --> 04:16.570
option equals disable jpeg and this all goes on one line.

04:16.570 --> 04:20.310
And if you want to copy and paste this line it's right in the notes.

04:20.360 --> 04:25.310
OK so once you've created that model of the basically the extension of that user model you have to remember

04:25.310 --> 04:30.260
to register it to the atom and up-I file is something like admin but site that register user profile

04:30.260 --> 04:35.800
info where it user profile info was imported from the models the high file.

04:35.900 --> 04:41.750
Now typically images those CSSA javascript files etc. all go in the static folder of your project but

04:41.760 --> 04:44.970
that static route variable path the find inside of settings that.

04:44.990 --> 04:49.310
Which we did in the last lecture and then the user uploaded content is going to go to the media folder

04:49.520 --> 04:56.210
with the media root and then once you set up your models and then your roots for static and media uploads

04:56.210 --> 05:00.310
are output what you want to do is set up the actual form.

05:00.560 --> 05:05.130
So again you want to implement a jingle forum that the user can use to work with the Web site and we're

05:05.150 --> 05:09.560
going to show you a quick example of what this would actually look like inside the forms that py file

05:09.560 --> 05:10.390
of re-application.

05:10.400 --> 05:14.330
So we already talked about the models up high nÃ©lisse like what the forms upaya that the user is going

05:14.330 --> 05:16.410
to be using.

05:16.460 --> 05:19.310
So the code inside the forms that Python looks something like this.

05:19.310 --> 05:24.770
You say from Django import forms and then from the basic application you made that model's import that

05:24.770 --> 05:26.970
user profile info model.

05:27.140 --> 05:34.310
Then we create a new class will say user profile info form that informs that model form as we saw in

05:34.310 --> 05:38.240
the other Gengel levels and then we create the portfolio the picture.

05:38.240 --> 05:43.130
Pass that in as a normal field image field and then we have this class Mehta that connects the model

05:43.310 --> 05:48.290
to the actual user profile info model and then we can exclude something in this case we can exclude

05:48.680 --> 05:50.390
user.

05:50.550 --> 05:55.720
OK so we talk a lot but this becomes a lot more clear when you actually see all code it out.

05:55.730 --> 05:59.660
So what we're going to do in the next lecture is actually code everything we just discussed will cut

05:59.660 --> 06:01.300
out the user model.

06:01.400 --> 06:06.090
Touch a bit on the media directory handling those images and then about the user form.

06:06.110 --> 06:07.950
So media directory and Hanly images.

06:08.030 --> 06:10.010
We set up a lot of that in the previous lectures.

06:10.010 --> 06:13.660
If you didn't watch the previous lecture all the way to the end make sure you've set that up.

06:13.860 --> 06:15.110
OK thanks everyone.

06:15.110 --> 06:16.000
I'll see you at the next lecture.

06:16.010 --> 06:17.800
We're going to start right from the atom editor.
