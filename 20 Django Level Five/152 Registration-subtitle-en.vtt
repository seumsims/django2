WEBVTT

00:05.130 --> 00:09.720
Hello everyone and welcome to the registration of a lecture for a Level 5.

00:09.740 --> 00:14.880
A lot of the coding for working with the users and authorization happens in the used up by file.

00:14.880 --> 00:19.890
The basic idea is that we check if there's a POST request and then perform some sort of action based

00:19.890 --> 00:21.880
off that information.

00:21.960 --> 00:25.820
Sometimes we all want to save that information correctly to the database.

00:25.980 --> 00:31.860
Other times we will commit equal to false inside of the Save method so we can manipulate the data before

00:31.860 --> 00:33.480
saving it to the database.

00:33.480 --> 00:36.800
This helps prevent collision errors from saving it twice.

00:36.810 --> 00:41.220
So instead we just commit to false the first time and then save it after we're done manipulating the

00:41.220 --> 00:47.180
data figuring out the registration views as an extension of what we learned about when discussing Gengel

00:47.180 --> 00:47.930
forms.

00:47.930 --> 00:50.500
So make sure to review that content if you don't remember it.

00:51.910 --> 00:54.280
This entire process is best shown through code.

00:54.430 --> 00:58.000
So we're going to jump to have used a PI file and cut through it all.

00:58.030 --> 01:02.500
We will also fix a small mistake made in the previous lectures when working with the forms and how to

01:02.500 --> 01:04.190
keep an eye out for those errors.

01:04.210 --> 01:08.010
So we'll start by fixing that small mistake and then we'll jump to the views that profile.

01:08.050 --> 01:09.240
Let's get started.

01:09.310 --> 01:14.630
Looky here I am at the Adam text editor and I have my views that Paey file open in.

01:14.680 --> 01:19.750
I can also check my forms that py file and there's actually a small error in this file.

01:19.990 --> 01:25.570
And we're going to walk through how we can discover the sort of error we have working with these up-I.

01:25.630 --> 01:29.370
So what I'm going to do is start off by creating the most basic view which is our index view.

01:29.380 --> 01:30.640
That's for the home page.

01:30.790 --> 01:35.870
So I will say request and then I'm going to return render.

01:35.920 --> 01:46.160
Now I will say request and then passen basic app slash indexed h T.M. and then the next we I want to

01:46.160 --> 01:48.650
make is for the registration page.

01:48.830 --> 01:56.660
Now we'll start off by saying DPF or we'll call this view register.

01:56.850 --> 02:03.100
It's going to take in a request and we'll create a variable called registered.

02:03.430 --> 02:08.500
And I will set equal to false and then go into the Penland is variable to tell if someone's been registered

02:08.560 --> 02:20.660
yet or not and they will say if request that method is equal to most here's what we'll do.

02:20.670 --> 02:26.100
And I should say to equal science here as I'm checking for equality we're going to do is get information

02:26.100 --> 02:29.520
from both of the forms just like we would if any other form.

02:29.580 --> 02:35.740
So I will create a variable called user underscore form and this matches the variable and going sent

02:35.760 --> 02:37.760
back with the context dictionary.

02:38.250 --> 02:46.740
And this will grab information from the user form and we'll set data is equal to request that post and

02:46.740 --> 02:55.910
then the other form we had was the profile underscore form and we'll set this equal to user profile

02:56.000 --> 02:56.790
info.

02:57.020 --> 02:58.920
And this is where I caught that mistake.

02:58.940 --> 03:08.740
So notice here I want the user form and the user profile info form and then I want this data to be equal

03:08.740 --> 03:11.640
to request post.

03:12.250 --> 03:16.000
But I notice that since I'm using the forms I should import the forms.

03:16.000 --> 03:21.250
So I come back up here and I go to import them and this we're going to kind of catch a little bit of

03:21.250 --> 03:22.700
a glitch or error.

03:22.810 --> 03:31.300
I'll say from basic app forms import the user form Khama import.

03:31.370 --> 03:37.280
And I see here user profile info but remember the user profile info is our model.

03:37.280 --> 03:43.850
So if I come to models that pi I have user profile info as the model I should have that as the same

03:43.850 --> 03:47.090
name here under the forms that Highflyer file.

03:47.160 --> 03:50.110
Or have the user form and the user profile info.

03:50.300 --> 03:58.070
So what I need to fix is changes to say instead of user profile info the user profile in FO form then

03:58.070 --> 04:00.800
save that and then come back up here.

04:01.720 --> 04:09.090
To views up high and changes from user profile info to user profile info form and then save that so

04:09.100 --> 04:16.270
the main mistake here that was made was instead of saying user profile info form we XLE used the same

04:16.390 --> 04:19.070
model name and that's kind of a big no no.

04:19.240 --> 04:24.780
What you should do is there is always at some sort of term form when you're dealing with a model form.

04:24.790 --> 04:29.140
That way it doesn't get confused on this line or it says model is equal to the form name.

04:29.170 --> 04:32.440
Otherwise it's thinks it's a self-referential call.

04:32.560 --> 04:33.780
All right if you have any questions on that.

04:33.780 --> 04:35.510
Feel free to post the Q&amp;A forum.

04:35.530 --> 04:36.780
There should have been a note about that.

04:36.790 --> 04:39.740
However before I even saw the mistake being done.

04:40.150 --> 04:44.860
So welcome back to views that pi and continue working on this point to collapse the trees we see a little

04:44.860 --> 04:50.970
more room so have that user form that profile forum created those two variables.

04:50.990 --> 04:56.240
Now I want to check if both forms are valid and if you ever have questions on any of these steps you

04:56.240 --> 04:59.090
can always reference the note code as well.

05:00.230 --> 05:12.540
I will say user underscore form is valid and profil form is underscore valid this or we're going to

05:12.540 --> 05:14.000
do stuff if they're valid.

05:14.430 --> 05:18.880
So we'll do some different actions as the user form versus the profile form.

05:18.990 --> 05:26.190
So I'm going to set the user equal to user underscore form and I will save that information directly

05:26.190 --> 05:34.970
to the database that I'm going to say user and I will call a set password method on this and I will

05:34.970 --> 05:39.150
set user the password.

05:39.460 --> 05:44.380
And this is essentially hash in the password to go into your settings up-I file and it sets it as the

05:44.380 --> 05:45.140
hash.

05:45.460 --> 05:50.280
And then after this we're going to say save.

05:50.280 --> 05:54.800
So basically what this is happening is we're grabbing the user form saving the database.

05:54.840 --> 06:00.170
Now we're hashing the password by saying set password method and then we save that hash passwords of

06:00.170 --> 06:03.120
the database so we save those changes to the user.

06:03.120 --> 06:05.700
And now we want to actually deal with that extra information.

06:05.730 --> 06:11.070
Remember that was their website link and their profile picture.

06:11.160 --> 06:17.260
So we will say profile is equal to profile underscore form.

06:17.310 --> 06:23.850
And I'm going to say that save but here is one point to passen commit is equal to false.

06:23.880 --> 06:25.930
I don't want to commit to the database yet.

06:25.950 --> 06:31.520
Otherwise I may get errors with collisions where it tries to overwrite this user.

06:31.680 --> 06:40.750
So we're going to do instead is say profile that user is equal to user and that sets up that one to

06:40.750 --> 06:41.610
one relationship.

06:41.620 --> 06:48.850
So if you come back to models remember over here the user profile info that user is equal to a one to

06:48.850 --> 06:51.720
one relationship with the user here.

06:51.760 --> 06:57.460
So this one to one relationship is defined in the views with this line of code profile that user is

06:57.460 --> 07:04.540
equal to user which is the user form which you come back here is this original form model vehicles user

07:05.600 --> 07:07.310
so follow up the steps.

07:07.310 --> 07:12.740
It's a little hard to show because it's kind of all three of these files linking at the same time.

07:12.840 --> 07:17.570
Hopefully you can kind of get the idea of how we're relating the extra profile information those extra

07:17.570 --> 07:21.080
attributes to the original one to one relationship.

07:21.080 --> 07:26.780
And then what we want to do is check if they actually provided a profile picture and we will say if

07:27.590 --> 07:38.680
profile underscore pick in request post excuse me request that files because it's an actual file we

07:38.680 --> 07:50.680
will say profil profile pic is equal to request files and this is basically a dictionary if all the

07:50.680 --> 07:53.040
files they uploaded in the request.

07:53.230 --> 07:58.600
So you'll use very similar tactics when dealing with other types of files not just images but if you

07:58.600 --> 08:02.580
want to upload a C S V a PTF the resume is set up.

08:02.590 --> 08:07.850
You're going to be saying requests that files actually find those and you'll be dealing with the key.

08:07.870 --> 08:15.920
Based on what you find in the models So say if the profile pic and request that models we set the attribute

08:15.920 --> 08:21.800
profile pic equal to the request or files which kind of acted like a dictionary and then profile pic

08:22.310 --> 08:29.710
and then we going to save the model after doing that we'll say profile save.

08:29.920 --> 08:35.490
And if they've done all of this so both forms are valid we save the user and we save their profile set

08:35.490 --> 08:38.190
up their picture then I'm going to set registered

08:41.330 --> 08:42.300
equal to true.

08:42.680 --> 08:44.390
So the registration was successful.

08:45.500 --> 08:48.470
Else what I'm going to do is print the air.

08:48.470 --> 08:52.700
So if I get an L statement here that means the forms were involved.

08:52.700 --> 08:54.830
So one of the forms or both of the forms were invalid.

08:54.860 --> 09:00.330
And what we can do in this case is just print out the error so I can see a user form.

09:00.830 --> 09:09.530
There's And then we can also just do this almost like a tuple So say a profile form errors and there's

09:09.530 --> 09:09.920
more.

09:09.920 --> 09:13.430
There's other ways we can do all of that later on we'll show especially during the Clone project.

09:13.430 --> 09:18.600
But right now we could just print out the actual errors and then we'll say.

09:18.600 --> 09:19.110
Else.

09:19.110 --> 09:26.660
And this else winds up not with this if the over here with the IF request that method is to post so.

09:26.690 --> 09:32.390
Else That means the request was on an HTP request so it can actually post anything.

09:32.430 --> 09:34.760
So it will do here is set everything up.

09:36.110 --> 09:44.530
So we'll say User Form is equal to an instance of user form and we'll say profile form is equal to an

09:44.530 --> 09:49.940
instance of the user profile form or a user profile in full form.

09:51.880 --> 09:54.190
And then once this is all done we're going to return

09:57.530 --> 10:06.550
a render of the request and then what we want to do is show them what file we want to import this into.

10:06.590 --> 10:10.330
And this is the registration file.

10:10.990 --> 10:16.140
So registration that is T.M. let me confirm that's what it called that looking under templates basic

10:16.170 --> 10:17.130
app.

10:17.130 --> 10:19.240
Yes it is registration that H.T. mail.

10:19.440 --> 10:20.130
So that's good.

10:20.130 --> 10:24.040
And then finally I need to pass in the context dictionary.

10:24.300 --> 10:30.610
So if I take a quick peek at registration that is T.M. remember we used several things here.

10:30.660 --> 10:35.560
We used user form profile form and then registered.

10:35.760 --> 10:43.990
So those are three things I need to pass along in the used up by file as my contex dictionary.

10:44.000 --> 10:49.060
So the first thing we can actually start this on a new line is so it's a little more organized.

10:49.880 --> 10:52.890
The first key is that user form.

10:53.090 --> 10:57.390
And that's just going to be equal to the user form we created.

10:57.420 --> 11:00.990
The second key value pair I want is the profile form.

11:01.260 --> 11:07.710
Again that's just going to be the profile form we created.

11:07.780 --> 11:13.560
And then finally the third thing I want is that registered key value pair.

11:13.600 --> 11:19.540
And that again matches up with registered and it's very common to have the context dictionary keys match

11:19.540 --> 11:21.570
up exactly with the values.

11:21.580 --> 11:22.990
That way it's really readable.

11:22.990 --> 11:25.500
And you remember what is what.

11:25.510 --> 11:28.910
OK so that is it for the registration view.

11:28.910 --> 11:33.170
Now as I mentioned it is a lot of coding and it's going to be kind of another round of a lot of coding

11:33.170 --> 11:35.230
when we talk about logging in and logging out.

11:35.510 --> 11:39.160
But if we scroll up here we should be able to see the steps.

11:39.170 --> 11:40.900
So first we have the registration view.

11:41.000 --> 11:47.660
We check if they're registered as we said equal to false so we kind of assume at first they're not registered.

11:47.890 --> 11:52.930
Then if the request is equal to post we grabbed the information off the forms we check of the forms

11:52.930 --> 11:53.640
are valid.

11:53.800 --> 12:00.160
If so we grab everything from the base user form then we grab the profile form and we got a double check

12:00.190 --> 12:04.360
that to see if there's a picture in there before we actually save it and then we said registered is

12:04.360 --> 12:05.420
equal to true.

12:05.650 --> 12:09.710
If they did type in a post there but there was an error.

12:09.730 --> 12:12.040
So they were both not valid or one of them was not valid.

12:12.110 --> 12:15.280
Then we'll just print out the errors and then else.

12:15.280 --> 12:17.110
So that means there was no request.

12:17.170 --> 12:17.960
The request method.

12:17.980 --> 12:23.310
Is that equal to post that we just set the forms so was that user form and the profile in full form.

12:23.410 --> 12:25.810
And then finally we return the render.

12:25.900 --> 12:26.490
OK.

12:26.830 --> 12:28.030
So let's save all of this.

12:28.030 --> 12:29.430
And let's actually test this out.

12:30.300 --> 12:34.040
I'm sure there will be some bugs to fix but let's see how we do.

12:34.420 --> 12:40.450
So I'm going to clear this should be CLX.

12:40.720 --> 12:47.490
And then what I'm going to do is say Python managed pie and I'm going to just for safety because I was

12:47.490 --> 12:50.650
fixing some of those mistakes going to migrate.

12:50.670 --> 12:50.920
All right.

12:50.940 --> 12:52.230
So no migrations apply.

12:52.230 --> 13:01.580
But let's also check with the make migration come in basic app so there's no problem kind of being extra

13:01.580 --> 13:02.680
paranoid about this.

13:02.690 --> 13:07.900
With one of these migrate commands even if you don't think you need to.

13:07.910 --> 13:08.620
So there we go.

13:08.650 --> 13:08.870
OK.

13:08.870 --> 13:13.320
So we applied all migrations we should be good which means I'm going to actually try to run the servers

13:13.330 --> 13:15.400
so I'll say Python is up high.

13:15.500 --> 13:16.290
Run server.

13:16.320 --> 13:18.160
And let's see if we get any errors.

13:20.730 --> 13:23.070
Well no errors on actually running the code.

13:23.070 --> 13:28.860
Let's see if we get an error on the Web site so bringing in the web site looks like that is working

13:28.860 --> 13:29.460
as well.

13:29.490 --> 13:31.890
Let's see if the registration page works.

13:31.890 --> 13:33.090
Click on register.

13:33.450 --> 13:38.880
OK so register is also working says user name and there's some auto stuff that gets filled out based

13:38.880 --> 13:40.920
off the validation requirements.

13:41.250 --> 13:50.510
So we'll will say new user e-mail address will just say hello at gmail dot com password.

13:50.550 --> 14:00.600
This going to be whatever pie's Taipan test password portfolio site all say HTP P.S. W.W. the Google

14:00.600 --> 14:08.760
dot com and check of the documentation for validation of these inputs we discussed inputting or validation

14:08.760 --> 14:12.390
input when we were talking about forms and in other jingoes section of the course.

14:12.520 --> 14:17.230
But for actual Your airfields it usually requires you to say HTP.

14:17.280 --> 14:20.590
So most people won't put that in and it will give an error.

14:20.730 --> 14:24.690
So what you can do is when actually working with that file in the views you can check if it sorts of

14:24.690 --> 14:24.940
that.

14:24.960 --> 14:31.720
If not you can just injected in then for the profile pic you can just choose any file I want shoes on

14:31.720 --> 14:35.190
for now instead of just going to click register and see if it works.

14:35.650 --> 14:38.720
So we hit register great and it says thank you for registering.

14:39.040 --> 14:42.920
So we need to do is actually check if this person now is in our database.

14:43.090 --> 14:47.420
But in order to do that if I click on admin We need a super user.

14:47.500 --> 14:49.110
So let's go and create that song.

14:49.180 --> 14:54.420
Drag this guy away and let's do Control-C to kill this.

14:54.610 --> 15:04.850
And then I will say Python managed up high create super user enter and we'll say Jose like usual.

15:05.130 --> 15:07.320
Any email address is fine.

15:07.520 --> 15:18.740
Trini hearing date of the and then password all use test password is password OK.

15:18.770 --> 15:20.780
Superuser was created successfully.

15:20.780 --> 15:22.590
Now let's run the server again.

15:22.700 --> 15:29.330
So say Python manage that pirate server going to come back to the home page and bring it in.

15:29.360 --> 15:34.310
So there's our home page and we should have already register that person says Click on admin type in

15:34.310 --> 15:41.040
our username and then type in the password log in and see if we get everything.

15:41.410 --> 15:41.900
OK.

15:42.080 --> 15:43.840
So here we have our basic app.

15:43.880 --> 15:47.740
And if you don't see this it's because you probably forgot to actually register on the admin that PI

15:47.750 --> 15:48.110
file.

15:48.110 --> 15:49.400
So make sure you do that.

15:49.400 --> 15:51.440
But will hit user profile info.

15:51.440 --> 15:55.220
Great we have that new user you can click on it and we can see all their information.

15:55.220 --> 15:58.020
User portfolio site profile pic.

15:58.040 --> 15:58.900
That looks good.

15:59.780 --> 16:08.580
So let's go back and if we go to wups home under site administration we can hit here on users and now

16:08.600 --> 16:11.650
we have Jose which has me this super user.

16:11.940 --> 16:17.370
And then we have the new user which is a hello at G-mail dot com and if we click on that new user we

16:17.370 --> 16:21.630
can see their quote unquote password but we actually can't see the password.

16:21.810 --> 16:26.330
And that's because of the hash algorithms that we used and the particular hashing algorithm we use with

16:26.340 --> 16:29.750
that are gone to makes us pretty secure.

16:29.790 --> 16:34.230
In fact that's very very secure and you can see that even some of the information is censored to us

16:34.500 --> 16:36.110
as a super administrator.

16:36.360 --> 16:40.110
So there is no way to actually get this user's password.

16:40.110 --> 16:44.970
And essentially there's no way if someone ever asked for your password that you would ever be able to

16:44.970 --> 16:45.500
give it to them.

16:45.500 --> 16:50.890
So this is so secure that even you as the administrator are not going be able to see the password.

16:50.940 --> 16:55.320
You can see their salt their hash some of it censored et cetera but you're never going to actually be

16:55.320 --> 17:00.060
able to give back to user their password if you do want to change the password.

17:00.090 --> 17:05.310
You can eventually set this up automatically but you can get this form and create a new password and

17:05.310 --> 17:08.030
then enter that password again and then change the password.

17:08.160 --> 17:11.880
You'll never be able to do is just tell the user what their original password was.

17:11.880 --> 17:15.660
The security is too high for you as a super user to even find that out.

17:16.580 --> 17:17.270
OK.

17:17.500 --> 17:23.020
So there's some other information here and we'll talk about more stuff with jingo administration in

17:23.020 --> 17:27.920
a future lecture but successfully We've registered someone to the site which is pretty awesome.

17:28.120 --> 17:31.870
Coming up next we want to talk about is them logging in and logging the site.

17:32.200 --> 17:34.050
Thanks everyone and I'll see you at the next lecture.
