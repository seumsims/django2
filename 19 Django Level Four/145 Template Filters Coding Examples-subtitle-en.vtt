WEBVTT

00:05.190 --> 00:09.870
Hello everyone and welcome to the template filter's coding example lecture and this lecture we're going

00:09.870 --> 00:14.280
to be walking you through the basics of using an actual template filter and also how you can create

00:14.280 --> 00:18.660
your own template filters if you ever feel you have the need to Gengel makes all of this really easy.

00:18.660 --> 00:21.690
So let's hop right back to the editor and get started.

00:21.690 --> 00:26.370
All right so all the work the learning underscore templates project that we've been working through

00:26.670 --> 00:29.980
the entire section of this course it's really easy.

00:30.030 --> 00:34.710
All we're going to be doing is affecting the index that HTL page to actually inject the variables and

00:34.840 --> 00:36.250
reform the template filters.

00:36.390 --> 00:41.220
But in order to do that we need some sort of context dictionary to actually pass to this index for you.

00:41.220 --> 00:48.300
So we'll come over to views that high under basic app and under index we're going to do is create a

00:48.300 --> 00:53.730
basic context dictionary so say context dictionary.

00:53.800 --> 00:56.140
Now we'll have a couple of keys in here.

00:56.320 --> 01:02.340
We'll say some text and this will be hello world.

01:03.520 --> 01:10.740
And then we'll also say number and this will be something like just make it 100 and we're going to pass

01:10.740 --> 01:13.260
that as a contex dictionary here.

01:15.010 --> 01:15.270
OK.

01:15.280 --> 01:18.650
So save that and then to make sure it works on the index page.

01:18.850 --> 01:21.820
Let's just inject those two variables themselves.

01:21.880 --> 01:32.400
So remember the first one was just called text and then the second one was just called name.

01:32.480 --> 01:34.320
Numbers are number Lemi mixture.

01:34.640 --> 01:37.430
Number OK.

01:37.470 --> 01:39.330
So we'll save that.

01:39.330 --> 01:45.540
And let's actually run our server so Python Myners up higher on server and call it make sure to actually

01:45.540 --> 01:46.910
there on that index page.

01:46.920 --> 01:52.820
I'm going to copy this spring over my browser and bringing in my browser I can see it right here.

01:53.020 --> 01:53.730
Hello world.

01:53.740 --> 01:54.760
And 100.

01:54.790 --> 01:57.030
This is actually quite small so let's enlarge it.

01:57.190 --> 02:00.140
Bring that away and let's put this under H1 tag.

02:00.190 --> 02:06.790
So I'm going to actually say welcome to index comment that outs and make an H1 tag that this will go

02:06.790 --> 02:07.220
into.

02:07.220 --> 02:12.760
So we'll put the text in and each one that way we can just clearly see and don't have to awkwardly zoom

02:12.760 --> 02:13.700
in that far.

02:14.620 --> 02:16.790
Copy that paste that in.

02:16.810 --> 02:19.870
Save this and refreshing my page and oh I see.

02:19.870 --> 02:20.740
Welcome to index.

02:20.740 --> 02:22.420
Hello World 100.

02:22.450 --> 02:22.850
OK.

02:22.900 --> 02:25.870
So what does a typical filter actually look like.

02:25.870 --> 02:30.290
Well the majority of them actually usually don't take parameters or additional arguments.

02:30.340 --> 02:34.700
They're usually based off of some sort of Python method that you would call on that basic data type.

02:34.810 --> 02:38.760
So if you ever think Oh man there's a python method I would like to do on the string.

02:38.830 --> 02:40.720
Definitely look up the filter reference.

02:40.720 --> 02:41.890
At least the built in ones.

02:41.980 --> 02:46.290
It's almost 100 percent sure to actually be there already implemented for you.

02:46.390 --> 02:48.300
So let's do that with Hello world.

02:48.430 --> 02:49.260
The text.

02:49.300 --> 02:53.530
Let's say I wanted to uppercase all the text.

02:53.600 --> 02:59.510
Well you could use the upper parentheses on a python string and it's really no different over here you

02:59.510 --> 03:06.110
just say text the pipe operator and then pass in the name of whatever the filter using is.

03:06.110 --> 03:11.960
And in this case it's upper and usually syntax wise they're both going to be touching that pipe OPERATOR

03:11.960 --> 03:15.620
So you will see it like that without any space OK.

03:15.810 --> 03:21.950
So let's save that and bring in our page refreshed so refresh the page coming in.

03:21.990 --> 03:23.220
Now I can see Hello world.

03:23.250 --> 03:25.300
It's all in uppercase now.

03:25.350 --> 03:28.230
Same number it's also a very simple process.

03:28.230 --> 03:33.310
Let's show you an example of one that would have an additional argument for instance one of the most

03:33.310 --> 03:41.250
simple ones is just adding a number so we can say number the pipe operator ad is the name of that actual

03:41.250 --> 03:46.900
filter then we say colon and in a string you can pass in whatever you want to add.

03:46.920 --> 03:52.400
So in this case let's add the number ninety nine to it just to make it really obvious.

03:52.440 --> 03:55.960
So we'll save that refresh our page and bring it back in.

03:56.070 --> 03:59.970
And here if I bring it back in I can see it's 1 9 9 after the refresh.

04:00.190 --> 04:01.980
OK.

04:02.140 --> 04:05.380
Now let's talk about how you can create your own custom filters.

04:05.440 --> 04:10.660
Usually you'll be able to find your own fill of the built in filters to be more than enough and sometimes

04:10.660 --> 04:14.830
you will even be doing a lot of this logic on the back and then some other Python script.

04:14.830 --> 04:18.500
But let's say you really need to do it with a template and you need your own filter.

04:18.520 --> 04:19.870
Well it's absolutely no problem.

04:19.870 --> 04:21.510
Django can certainly handle that.

04:21.610 --> 04:25.050
So you need to do is create a function that will work with that filter.

04:26.790 --> 04:33.240
In order to set this all up we have to follow a convention as far as where to actually place our custom

04:33.240 --> 04:36.910
template filters and what you end up doing is inside your application.

04:37.140 --> 04:44.070
At the same level of models and views since you are you going to do is underneath the application you'll

04:44.070 --> 04:51.300
create a new folder or new directory and you will call it template tags.

04:52.710 --> 04:59.520
And then inside of this you're going to make sure it creates a new file and you will call it underscore

04:59.550 --> 05:06.240
underscore in its underscore underscore that pi and that file is just going to be totally empty.

05:06.240 --> 05:10.840
Basically what this file says is it tells Python to treat this as a module.

05:10.860 --> 05:16.470
That way it can call it and load it in what you're going to be doing usually is creating a new file

05:16.590 --> 05:21.570
and then this is where you're going to actually put in your custom templates so we can say something

05:21.570 --> 05:22.110
like

05:24.820 --> 05:33.240
my underscore extras that pie and I'll show you how you can actually create your own filters and you

05:33.240 --> 05:35.340
can always reference the documentation.

05:35.370 --> 05:41.380
Just look up Django custom template tags and this would all be in there so you end up doing is first

05:41.710 --> 05:45.020
you need to actually register all of this.

05:45.240 --> 05:50.940
So you will say from Django import.

05:51.070 --> 05:53.120
And that's going to be template.

05:53.320 --> 05:56.090
And then you create an object called register.

05:56.400 --> 06:01.400
You said it equal to template dot and it's a library.

06:01.630 --> 06:04.670
And actually this should be capital.

06:04.680 --> 06:05.500
There we go.

06:05.550 --> 06:08.050
So register equals template library.

06:08.370 --> 06:12.900
And then what you're going to do is write a function that will be your custom template filter.

06:12.900 --> 06:18.420
So we can say the F and let's follow the one that's in the documentation example such as cut.

06:18.750 --> 06:24.960
And this is the one that takes in an actual value so that's whatever the variable or value from your

06:24.960 --> 06:28.250
context dictionary going to pass and then any additional argument.

06:28.260 --> 06:34.580
So we'll just call that Arg and we'll say what this function does.

06:34.590 --> 06:44.710
So it is good to give it a docstring will say This cuts out all values of arg.

06:45.630 --> 06:53.080
From the string and then what we're going to do is we'll say return and we'll grab that value.

06:53.080 --> 06:55.070
We're going to assume it's a string.

06:55.390 --> 06:58.380
Again you're going have to be careful with your kind of assumptions here.

06:59.280 --> 07:03.110
And then we'll say arg and then that.

07:03.120 --> 07:09.390
So basically you can call the replace method off a python string and then pass in what you're looking

07:09.390 --> 07:11.470
for and then what you want to replace it with.

07:11.520 --> 07:14.390
This is a really common Python string operation.

07:14.550 --> 07:19.470
So we're just kind of putting this whole thing and wrapping it into this nice little custom filter called

07:19.560 --> 07:20.210
cut.

07:20.520 --> 07:22.950
And then what we need to do is register this.

07:22.950 --> 07:37.340
So what we do is over here we can say register dot filter and I pass in as a string what I actually

07:37.340 --> 07:39.620
want to call this filter.

07:39.620 --> 07:44.840
So when I call it in my custom filter template tag we'll just call it cut and then you have to actually

07:44.840 --> 07:46.160
pass in the function itself.

07:46.160 --> 07:48.980
You just create it which in this case is also cut.

07:49.010 --> 07:52.810
So the first one is going to be the string that you call the function when you use the template tag.

07:52.940 --> 07:54.470
The second one is the function itself.

07:54.470 --> 07:57.320
So it's not a string just a direct call to this function.

07:57.720 --> 07:58.230
OK.

07:58.550 --> 08:02.450
So that's the very basics and kind of in the order that you're thinking of.

08:02.660 --> 08:08.430
So from Gengel import template register then you create whatever custom template filter.

08:08.450 --> 08:09.740
And then here it is.

08:09.740 --> 08:10.960
So let's actually try this out.

08:10.960 --> 08:13.760
Now it's coming back to our index.

08:13.760 --> 08:17.630
Let each team page instead of saying text upper.

08:17.720 --> 08:25.670
We're going to do is this will say text and then we're going to say cuts and then let's cut out the

08:25.670 --> 08:26.710
term.

08:26.810 --> 08:28.230
Hello.

08:28.240 --> 08:34.260
So I will save this and let's bring back in our project over here.

08:34.330 --> 08:37.510
And if I refresh this no it cut off.

08:37.510 --> 08:38.120
Hello.

08:38.290 --> 08:44.130
So that was our own custom filter cut and it cuts out anything that would place as a parameter.

08:44.360 --> 08:48.010
And that's the very basics of how you can create your own custom filter.

08:48.010 --> 08:52.390
Now as a quick note there is another way to register the filter itself.

08:52.390 --> 08:58.870
So if we come back here under a template tagged in it and then my extras we registered using this register

08:58.870 --> 09:00.690
equals template library.

09:00.880 --> 09:05.040
That is one way to do it but you can also do it with decorator's and it looks a little cleaner.

09:05.080 --> 09:11.650
So remember back when we were introducing decorators in the Python level 2 section of the course I mentioned

09:11.680 --> 09:17.570
that later on in Django I would talk about decorator's and then advise you to go back.

09:17.590 --> 09:18.970
So this is that time.

09:18.970 --> 09:23.160
If you haven't learned about decorator's yet now's the time to go to the decorator's lecture.

09:23.170 --> 09:23.830
Go through it.

09:23.830 --> 09:27.800
It's a little complicated but it'll make a lot more sense when you actually see it here.

09:27.820 --> 09:33.130
So I'm going to comment this out this register that filter since I'm passing in essentially what is

09:33.130 --> 09:35.430
a function into another function call.

09:35.710 --> 09:36.700
I will do this.

09:36.760 --> 09:45.760
We can say at register that filter and then give it the name equal to cut

09:48.610 --> 09:51.620
save this and now we're going to do to make sure this all worked.

09:51.640 --> 09:59.570
It's come back to index and instead of cutting a flow and going to cut world save that as well and then

09:59.600 --> 10:03.130
bring in an actual browser refresh this.

10:03.140 --> 10:04.780
And here we see just hello.

10:04.810 --> 10:10.970
So world got cut out and that's how you can use decorator's to actually registered these custom filters.

10:10.970 --> 10:15.970
And this looks kind of a lot nicer and a lot clearer especially if you already know decorator's.

10:16.010 --> 10:16.510
All right.

10:16.700 --> 10:18.530
So that's it for templates.

10:18.530 --> 10:22.760
There's still a lot more you can explore in the documentation but this should be enough for you to create

10:22.760 --> 10:26.570
basically any normal Web site that you want to work with.

10:26.570 --> 10:29.260
Thanks everyone and I'll see you at the next section of the course.
