WEBVTT

00:05.230 --> 00:09.460
Hello everyone and welcome back and this lecture will be coding through the solutions for the jingle

00:09.460 --> 00:10.900
templates challenge.

00:10.930 --> 00:13.240
Let's quickly review what we had to do.

00:13.330 --> 00:17.000
We want to create templates directory and connected to settings that py file.

00:17.050 --> 00:18.510
So we'll tackle that first.

00:18.730 --> 00:23.660
Then we want to create a new view called Help and used you are all mapping to render it for any page.

00:23.660 --> 00:25.560
The extension slash help.

00:25.870 --> 00:29.910
And then we wanted to add template tags to return something like Help page.

00:30.180 --> 00:33.810
OK let's jump to the Adam text editor and accomplish all these tasks.

00:34.150 --> 00:40.720
OK here I am at the Adam text editor to start off let's create that templates directory so I can just

00:40.720 --> 00:47.970
right click on to add a new folder called templates and then hit enter and then inside of this I'm going

00:47.970 --> 00:50.760
to do a subdirectory for my application.

00:50.760 --> 00:52.490
This case will just use app too.

00:52.500 --> 00:54.980
You could have also created a new application for this.

00:55.120 --> 00:56.710
Whatever made more sense to you.

00:56.850 --> 00:58.700
Well let's call this app too.

00:58.990 --> 01:03.630
Again I would have been surprised that something like help and created a new directory an application

01:03.630 --> 01:07.560
called help but right now we have templates an app to create it.

01:07.560 --> 01:13.470
Now let's go to our approach to our project to setting's file and sync up this templates directory to

01:13.470 --> 01:14.810
our actual settings.

01:14.820 --> 01:18.890
Remember we use the convenient import os command to actually do this.

01:18.960 --> 01:26.510
So I will create something that looks like this will say template directory and I will say oh estopped

01:26.510 --> 01:31.270
path dot join and I will join my base directory.

01:32.610 --> 01:35.860
With templates great.

01:36.010 --> 01:37.430
And then I have to scroll down.

01:38.290 --> 01:44.800
To my actual list pass installed apps past middleware and then here in templates this list has a dictionary

01:44.800 --> 01:47.810
inside of it and under diers for their victories.

01:47.830 --> 01:54.260
I want to just say templates underscore the IIR and then save this.

01:54.310 --> 01:54.670
All right.

01:54.790 --> 01:55.750
Great.

01:55.750 --> 02:02.390
Now let's continue on the next thing we want to do is sync up and map the or else and in order to do

02:02.390 --> 02:04.250
this we have to do a couple of things.

02:04.250 --> 02:09.710
First off I want to do what we've done in the previous mappings you are Elle's lecture where we actually

02:09.710 --> 02:12.760
have each application have its own or else that py file.

02:13.010 --> 02:18.060
So all right click on app to create a new file and I will call it your Else.

02:18.440 --> 02:25.660
Net goes inside app 2 which is inside project to and then hear what I will do is the following.

02:25.660 --> 02:41.210
I'll say from jingo dash dash you or else import your L and then I will also say from app to import

02:41.450 --> 02:45.900
views and we haven't actually created the help yet but we will in just a second.

02:46.370 --> 02:53.630
And then finally we'll have our own your moral patterns list here and inside of this list I'm going

02:53.630 --> 03:00.190
to call the oral function that we just imported and then pass on something that looks like this will

03:00.230 --> 03:02.060
put some regular expression here.

03:04.130 --> 03:06.710
And then I will say views da.

03:06.770 --> 03:11.540
And in this case we've previously done indexed but I wanted to create a new view called Help haven't

03:11.540 --> 03:18.710
done it yet but I will so we'll call views that help there and I will give it the name.

03:18.930 --> 03:20.590
And then let's save that.

03:20.730 --> 03:28.540
And now let's go to our actual Urals dot PI file of project 2 and connect this you URLs to this your

03:28.540 --> 03:29.120
URLs.

03:29.340 --> 03:34.560
So we'll scroll down and here we have the usual patterns for the entire project.

03:35.230 --> 03:40.290
So let's connect this to our actual you or else PI that's inside of our application.

03:40.570 --> 03:44.650
And in order to do this remember we need to import the include function.

03:44.650 --> 03:52.330
So I will say from again Jingo that QOF thought your else that could have actually put this up here.

03:52.330 --> 03:56.230
So there's no need to really write this twice but I just want to make it really clear what we're doing

03:56.600 --> 03:58.210
all put and include.

03:58.210 --> 04:01.500
And again I could have just done something like comma include here.

04:01.690 --> 04:02.520
The same thing.

04:02.920 --> 04:07.000
But just to make it clear I'm going to put it in as a new line.

04:07.000 --> 04:10.580
Save that and then we have our index page admin.

04:10.620 --> 04:12.730
Well let's add something else here.

04:13.060 --> 04:17.480
We'll say you are el and using regular expressions.

04:17.490 --> 04:23.230
I'm going to say Chevron or carot now say help.

04:23.310 --> 04:35.680
And then I will say include I will call up to you or else college finished that list and save that and

04:35.680 --> 04:40.420
then a couple of things you have to still do is actually create that view and then create the HTL that

04:40.420 --> 04:41.650
we call for that view.

04:41.950 --> 04:47.090
So coming back to use an app too right now I have this index for you.

04:47.140 --> 04:55.140
Let's create a new one called help and it will take in a request and then there's something we still

04:55.140 --> 05:01.080
need to add to this which is actual use of that render.

05:01.120 --> 05:07.050
So I'm going to make a dictionary will call this help dictionary or really whatever you want to call

05:07.050 --> 05:07.690
it.

05:08.100 --> 05:11.400
And then create a dictionary and we'll call this help.

05:12.380 --> 05:13.650
Inserts.

05:14.540 --> 05:22.410
And as the value for that key we'll just say help page just to make it really clear.

05:22.620 --> 05:32.650
And then I'm going to return the render function taking in that request realizing that it goes with

05:32.830 --> 05:37.220
app too and will say help that HMO.

05:37.450 --> 05:43.900
So what that's actually calling is over here this template that we're about to create and then the context

05:43.900 --> 05:50.680
of this that we actually inject using the template tagging is going to be this help dictionary

05:53.330 --> 05:53.780
ok.

05:53.820 --> 05:54.510
Save that.

05:54.510 --> 05:59.470
And then finally last step is to actually create that CML file so will say new file.

06:00.450 --> 06:01.610
And this will be help.

06:01.700 --> 06:04.530
H HVM l enter.

06:04.760 --> 06:09.110
I'll say h tim L here title will say something like help page.

06:09.330 --> 06:14.310
And then finally let's actually insert using template tags so healthy right now you realize the most

06:14.310 --> 06:20.520
basic template tags is just the double brackets double curly brackets on each side and then we want

06:20.520 --> 06:26.930
to actually insert the dictionary that we created that context and something to keep in mind that we're

06:26.930 --> 06:30.290
not actually inserting the dictionary but the key of that dictionary.

06:30.320 --> 06:36.930
So if we go back to our page here under views we want to import this help insert.

06:37.100 --> 06:40.850
So sometimes a common mistake to accidently put in helped dictionary.

06:40.910 --> 06:43.350
But you should really have any in this variable rate here.

06:43.520 --> 06:44.120
Help answer.

06:44.120 --> 06:49.690
So I will copy that and come back to help here and paste that.

06:49.870 --> 06:52.130
All right so that was a lot of steps.

06:52.150 --> 06:54.690
Let's hopefully make sure it all worked out.

06:54.760 --> 06:57.850
I'm going to say here on their project too.

06:57.970 --> 07:07.130
Python managed up-I run server enter and if we did everything right we should be able to copy this your

07:07.160 --> 07:10.930
L and paste it into our browser.

07:10.950 --> 07:12.860
Let me bring that browser over.

07:13.050 --> 07:17.600
And here we have our browser it says my second project that makes sense that's the index page that is

07:17.610 --> 07:19.160
set up previously.

07:19.170 --> 07:21.480
But now let's test this out and write.

07:21.480 --> 07:22.370
Help.

07:22.710 --> 07:28.050
And you know we get the help page so it takes in the template tag that we inserted and it looks it up

07:28.560 --> 07:30.350
and we can see also help page here.

07:30.360 --> 07:32.460
That's the title that we insert it here.

07:32.550 --> 07:35.670
So just to clarify this help page appear on the top.

07:35.670 --> 07:36.850
That's from the title.

07:36.900 --> 07:42.750
This Help Pages HVM l text is coming in from that template tagging of help underscore insert.

07:42.750 --> 07:47.940
All right if you were having trouble with this than I really suggest that you take the time to review

07:47.940 --> 07:54.210
the previous lectures on template tagging and setting that up and try another shot at this exercise.

07:54.210 --> 07:58.740
This is definitely a big leap forward and it's really important that you have this foundation of connecting

07:58.830 --> 08:01.190
the templates and the views together.

08:01.240 --> 08:06.090
Coming up next we're going to learn how to connect this two models to your actual database.

08:06.090 --> 08:06.830
All right.

08:06.840 --> 08:09.840
Hope you enjoyed that little challenge and I'll see you at the next lecture.

08:09.840 --> 08:10.400
Thanks everyone.
