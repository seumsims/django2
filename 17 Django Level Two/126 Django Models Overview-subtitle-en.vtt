WEBVTT

00:04.960 --> 00:09.940
Hello everyone and welcome to the Django model's lecture and this lecture we're going to be covering

00:09.940 --> 00:13.930
the main concepts behind models databases and how it works with them.

00:14.140 --> 00:16.670
We will actually be doing any live coding in this lecture.

00:16.690 --> 00:19.510
We're just going to be looking at concepts through slides.

00:19.510 --> 00:23.150
So make sure you have enough time to just fully enjoy this lecture and the concepts.

00:23.320 --> 00:27.270
And then in the next lecture we're going to comb through a lot of the stuff we talk about here.

00:28.390 --> 00:29.070
All right.

00:29.290 --> 00:34.570
In the central part of any web site is the ability to accept information from a user and input it into

00:34.570 --> 00:35.510
a database.

00:35.620 --> 00:41.560
Then later on retrieve information from a database and use it to generate content for the user.

00:41.730 --> 00:47.730
We use models to incorporate a database into a single project and Django comes equipped with sequel

00:47.730 --> 00:53.250
light which is a sequel engine sequel light will work with us for our simple examples who won't be doing

00:53.250 --> 00:56.020
any huge web sites so it should be totally fine.

00:56.040 --> 00:59.240
But Gengel can also connect to a variety of sequel engine back ends.

00:59.400 --> 01:01.940
It can connect to post-career sequel My sequel.

01:02.030 --> 01:06.320
Now all you have to do is just switch out the actual engine and we'll talk about that later on.

01:06.360 --> 01:12.220
But for most of our project sequel life is more than enough in the setting up file you can edit the

01:12.220 --> 01:16.930
engine parameter used for databases and that's where you would actually connect to a different backend

01:16.960 --> 01:21.940
if you didn't want to use sequel like then to create an actual model we use a class structure inside

01:21.940 --> 01:27.160
of the relevant applications models that py file which we haven't actually edited yet but we will in

01:27.150 --> 01:34.400
the next lecture this class object will be a subclass of jingoes builtin class jingled that D-B that

01:34.420 --> 01:35.770
models that model.

01:35.770 --> 01:41.650
So basically you're going to inherit from this builtin model class then each attribute of the class

01:41.650 --> 01:46.590
represents a field which is just like a column name with constraints and sequel.

01:46.640 --> 01:48.160
This will all feel very natural.

01:48.160 --> 01:52.880
If you already have some sequel experience that in case you don't let's quickly review what a sequel

01:52.880 --> 01:57.140
database looks like and if you already have sequel experience you can just kind of fast forward through

01:57.140 --> 01:58.830
this little explanation.

01:59.610 --> 02:00.200
OK.

02:00.390 --> 02:03.180
So basically sequel operates like a giant table.

02:03.180 --> 02:07.800
If you're familiar with Excel or spreadsheets and general sequel operates in a very similar fashion

02:07.800 --> 02:13.590
with each column representing a field in each row representing an individual and true or data point.

02:13.590 --> 02:16.710
So here we can see a table has a website ID a web site name.

02:16.710 --> 02:18.460
And then if you are el.

02:18.670 --> 02:23.920
So each column has a type of field as well such as a character field an integer field or a date field

02:24.100 --> 02:26.320
and each field can also have constraints.

02:26.590 --> 02:31.000
So here we have Web site ID and that's an integer field that we have web site name.

02:31.000 --> 02:32.960
That's a character field etc..

02:34.340 --> 02:39.380
And for those kind of constraints for example the character field should have a max length constraint

02:39.590 --> 02:42.290
indicating the maximum number of characters allowed.

02:42.320 --> 02:46.000
So you have the type of field and then constraints on that field.

02:47.200 --> 02:51.040
The last thing to note is table or models with Django.

02:51.040 --> 02:57.290
The relationships between them and often models will reference each other for this referencing to work.

02:57.290 --> 03:00.690
We use the concept of foreign keys and primary keys.

03:00.970 --> 03:06.680
So to show an example imagine we now have two models which are essentially two databases one to store

03:06.680 --> 03:10.470
Web site information and another to store data information.

03:10.490 --> 03:15.200
So here the last we have the Web site ID the web site name and the URL on the right.

03:15.230 --> 03:22.040
We have the corresponding web site ID and then they accessed so we could say that the Web site ID column

03:22.100 --> 03:29.660
is a primary key in the left table and a foreign key in the right table a primary key is a unique identifier

03:29.720 --> 03:31.360
for each row in a table.

03:32.150 --> 03:38.230
A foreign key just the notes that the column coincides with primary key of another table.

03:38.380 --> 03:43.040
Later on we're going to move on to discuss things like one to one or many to many relationships.

03:43.180 --> 03:45.770
But for now this is all we really need to know.

03:46.090 --> 03:50.170
That should be enough for understanding of models and Django and just a general quick overview of what

03:50.170 --> 03:53.110
sequel kind of looks like as a concept.

03:53.110 --> 03:59.410
Now let's show an example of the model class that would go into the model up-I file of your application.

03:59.410 --> 04:04.960
So as I mentioned we have these model classes and the inherits from jingoes builtin models not model

04:04.960 --> 04:05.530
class.

04:05.530 --> 04:11.560
So let's imagine we have a topic model we would have the class topic and then we can say top name is

04:11.560 --> 04:14.360
going to be models not the type of field character field.

04:14.500 --> 04:18.980
And then as arguments you passen these parameters that are constraints so we say it with the max length.

04:19.020 --> 04:25.510
Is this every topic name has to be true or unique or should say and we can set that unique equal to

04:25.510 --> 04:30.850
true then we have let's say another model for a web page and essentially each of these classes is going

04:30.850 --> 04:36.610
to act like a table in your database and then we have category name your L and then we say models a

04:36.640 --> 04:39.370
foreign key the character field the field.

04:39.370 --> 04:40.660
So those are all different fields.

04:40.810 --> 04:42.210
And then you can pass parameters.

04:42.220 --> 04:48.910
But no here how the category equals to models that foreign key and the way pass topic there because

04:48.910 --> 04:54.760
that's going to be a foreign key from the topics model then we can have the web page model where we

04:54.760 --> 04:59.470
have the topic again that's foreign key the name which is a character field and and you are all models

04:59.470 --> 05:00.890
that you are all field.

05:00.910 --> 05:04.750
And if we can then have a specific method to return the actual name.

05:04.780 --> 05:12.460
So if you say Prince web page it grabs the name and after we set up the models we can migrate that database.

05:12.470 --> 05:16.610
So don't worry if you didn't fully understand that code in the next lecture we're going to be coding

05:16.670 --> 05:18.340
and explaining a lot more.

05:18.770 --> 05:22.300
So again when we actually set up the models we can migrate that database.

05:22.340 --> 05:26.750
And this basically lets Shingo do the heavy lifting of creating sequel databases that correspond to

05:26.750 --> 05:27.720
the models we created.

05:27.740 --> 05:30.390
And this is the part that's really cool about Django.

05:30.410 --> 05:32.430
You can just write up those classes.

05:32.600 --> 05:37.250
And then with a very simple command jingoes going to do all the heavy lifting of creating a single database

05:37.520 --> 05:42.910
that corresponds to that model you can do this entire process with just a simple command.

05:42.930 --> 05:48.580
Python managed up-I migrate which we talked about earlier in the course when we got a warning from Django

05:48.600 --> 05:53.130
telling us to do this migrate call but now since we actually are going to work with models we can do

05:53.130 --> 05:54.180
it.

05:54.200 --> 05:59.260
After that we then register the changes to our app shown here are some generic app one.

05:59.480 --> 06:05.540
So we would say Python managed up-I make great creations and then your application name app one first

06:05.540 --> 06:10.480
that whatever you happen to call it we then migrate the database one more time.

06:10.510 --> 06:16.600
I manage that PI migrate and then later on we can actually use the shell from the managed up-I file

06:16.810 --> 06:20.400
to play around with the models and will show you how to do that as well.

06:20.410 --> 06:25.420
So in order to use the more convenient admin interface with the models however we need to register them

06:25.420 --> 06:28.540
to our applications admin that py file.

06:28.540 --> 06:30.390
Now we can do this with the following code.

06:30.400 --> 06:35.710
We say from Jingo that contrib import admen and then from app thought models or whatever app happens

06:35.710 --> 06:37.780
to be name you import the actual models.

06:37.780 --> 06:44.290
Model one model too in those previous examples that would be things like topic or web page day accessed

06:44.400 --> 06:50.380
etc. and then we say admin that site that roadster and you pass in the model as an argument then with

06:50.390 --> 06:54.950
the models in the database created we can use jingoes fantastic adamant interface to interact with the

06:54.950 --> 06:55.710
database.

06:55.850 --> 06:58.590
And this is something that's really cool and awesome about Django.

06:58.590 --> 07:03.830
It's one of the key features the fact that once you set up these databases it's jingoes going to do

07:03.830 --> 07:10.070
all the heavy lifting to create those models into Jeng into databases and you're going to have full

07:10.110 --> 07:15.260
admin interface so it will show you how to log in to the admin interface and then you can read what's

07:15.260 --> 07:16.720
going on in the models.

07:17.740 --> 07:22.640
So in order to fully use the database and the admin we're going to need to create a super user and we

07:22.640 --> 07:24.160
can do this with the following command.

07:24.410 --> 07:30.110
Ice on managed up high create super user and then you're asked to provide a name email and password.

07:30.110 --> 07:34.160
So remember when we actually are cutting through this in the next lecture or the next couple of lectures

07:34.520 --> 07:39.470
that you're going to have to remember or write down the name email and password we provide for this

07:39.530 --> 07:41.910
super user OK.

07:42.060 --> 07:46.140
Then once it's set up the models it's always a good idea to populate them with some test data.

07:46.140 --> 07:50.700
And we're going to be using a library to help with this called faker which produces fake data and will

07:50.700 --> 07:53.220
create a script to do this as well.

07:53.220 --> 07:53.820
All right.

07:53.820 --> 07:56.490
I know I've been talking a lot and we've discussed a ton.

07:56.490 --> 08:00.190
Don't worry if you didn't actually understand how to implement all that stuff.

08:00.390 --> 08:05.970
But hopefully you did get a general idea of how the Django models the databases and the admin interface

08:05.970 --> 08:10.200
kind of connect with each other in the next lecture in the next few lectures were going to be coding

08:10.200 --> 08:13.290
through an example of all of this to really help your understanding.

08:13.290 --> 08:13.830
Okay.

08:14.070 --> 08:14.910
Thanks everyone.

08:14.970 --> 08:19.410
And I'm excited to get to the next lecture because we're really going to see the power of Django coming

08:19.410 --> 08:21.030
up with the models.

08:21.030 --> 08:22.450
Thanks and I'll see you there.
